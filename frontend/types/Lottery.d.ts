/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LotteryInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addPrizes(uint256,uint256[],uint16[])": FunctionFragment;
    "askForRefund(uint256)": FunctionFragment;
    "buyTickets(uint256,uint256,uint8)": FunctionFragment;
    "cancelLottery(uint256)": FunctionFragment;
    "changeCloseTime(uint256,uint32)": FunctionFragment;
    "claimPointsAndBuyTickets(uint256,uint256,uint256,bytes32[],uint8)": FunctionFragment;
    "claimPrize(uint256,address,uint256,uint256,bytes32[])": FunctionFragment;
    "claimedPrizes(uint256,uint256)": FunctionFragment;
    "createNewLottery(uint256,uint256,uint256,uint256,uint256,uint32,uint32,address,bool,uint256)": FunctionFragment;
    "getLotteryCount()": FunctionFragment;
    "getLotteryInfo(uint256)": FunctionFragment;
    "getLotteryTicketCount(uint256)": FunctionFragment;
    "getLotteryTickets(uint256,uint256,uint256)": FunctionFragment;
    "getParticipantHistory(address)": FunctionFragment;
    "getParticipantsCount(uint256)": FunctionFragment;
    "getPrizes(uint256)": FunctionFragment;
    "getRefundableCoinBalance(uint256,address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTicketCountPerUser(uint256,address)": FunctionFragment;
    "getWhitelist(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "lotteries(uint256)": FunctionFragment;
    "lotteryTickets(uint256,uint256)": FunctionFragment;
    "participants(uint256,address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "prizeClaimed(uint256,uint256)": FunctionFragment;
    "prizeMerkleRoots(uint256)": FunctionFragment;
    "prizes(uint256,uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "randomGenerator()": FunctionFragment;
    "randomSeeds(uint256)": FunctionFragment;
    "receiveRandomNumber(uint256,bytes32,uint256)": FunctionFragment;
    "removePrize(uint256,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestRandomNumber(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardsContract()": FunctionFragment;
    "setMaxTickets(uint256,uint32)": FunctionFragment;
    "setMaxTicketsPerUser(uint256,uint32)": FunctionFragment;
    "setPrizeMerkleRoot(uint256,bytes32)": FunctionFragment;
    "setRandomGenerator(address)": FunctionFragment;
    "setRewardsContract(address)": FunctionFragment;
    "setWhitelist(uint256,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateLottery(uint256,uint256,uint256,uint256,uint32,uint32,address,uint16,uint256,uint8,bool)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "whitelists(uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawals(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPrizes",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "askForRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTickets",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLottery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCloseTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPointsAndBuyTickets",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrize",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedPrizes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewLottery",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteryCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteryInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteryTicketCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteryTickets",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipantHistory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipantsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRefundableCoinBalance",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketCountPerUser",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lotteries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryTickets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prizeClaimed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prizeMerkleRoots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prizes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomGenerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomSeeds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveRandomNumber",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePrize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTickets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTicketsPerUser",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrizeMerkleRoot",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRandomGenerator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateLottery",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawals",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPrizes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "askForRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCloseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPointsAndBuyTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimPrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedPrizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotteryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotteryInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotteryTicketCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotteryTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipantHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipantsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrizes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRefundableCoinBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketCountPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lotteries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lotteryTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prizeClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prizeMerkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prizes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomGenerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomSeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTicketsPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrizeMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRandomGenerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawals",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LotteryPrizesCountChanged(uint256,uint256)": EventFragment;
    "LotteryStatusChanged(uint256,uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "PrizeClaimed(uint256,address,uint256)": EventFragment;
    "Refunded(uint256,address,uint256)": EventFragment;
    "RequestNumbers(uint256,bytes32)": EventFragment;
    "ResponseReceived(bytes32)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TicketCostChanged(address,uint256,uint256)": EventFragment;
    "TicketSold(uint256,uint256,address,uint8)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryPrizesCountChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestNumbers"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResponseReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketCostChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type LotteryPrizesCountChangedEvent = TypedEvent<
  [BigNumber, BigNumber] & { lotteryId: BigNumber; numberOfPrizes: BigNumber }
>;

export type LotteryStatusChangedEvent = TypedEvent<
  [BigNumber, number] & { lotteryId: BigNumber; status: number }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type PrizeClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    lotteryId: BigNumber;
    participantAddress: string;
    prizeId: BigNumber;
  }
>;

export type RefundedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    lotteryId: BigNumber;
    participantAddress: string;
    refundAmount: BigNumber;
  }
>;

export type RequestNumbersEvent = TypedEvent<
  [BigNumber, string] & { lotteryId: BigNumber; requestId: string }
>;

export type ResponseReceivedEvent = TypedEvent<
  [string] & { requestId: string }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type TicketCostChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    operator: string;
    lotteryId: BigNumber;
    priceOfTicket: BigNumber;
  }
>;

export type TicketSoldEvent = TypedEvent<
  [BigNumber, BigNumber, string, number] & {
    lotteryId: BigNumber;
    ticketNumber: BigNumber;
    participantAddress: string;
    tier: number;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export class Lottery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LotteryInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addPrizes(
      _lotteryId: BigNumberish,
      _prizeIds: BigNumberish[],
      _prizeAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    askForRefund(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyTickets(
      _lotteryId: BigNumberish,
      _numberOfTicketsToBuy: BigNumberish,
      _tier: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelLottery(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeCloseTime(
      _lotteryId: BigNumberish,
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimPointsAndBuyTickets(
      _lotteryId: BigNumberish,
      _numberOfTicketsToBuy: BigNumberish,
      _points: BigNumberish,
      _proof: BytesLike[],
      _tier: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimPrize(
      _lotteryId: BigNumberish,
      _winner: string,
      _prizeId: BigNumberish,
      _ticketNumber: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimedPrizes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createNewLottery(
      _lotteryId: BigNumberish,
      _collectionId: BigNumberish,
      _memberTicketCostPoints: BigNumberish,
      _memberTicketCostCoins: BigNumberish,
      _nonMemberTicketCostCoins: BigNumberish,
      _startTime: BigNumberish,
      _closeTime: BigNumberish,
      _nftContract: string,
      _isRefundable: boolean,
      _defaultPrizeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLotteryCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLotteryInfo(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          startTime: number;
          closeTime: number;
          participantsCount: number;
          maxTickets: number;
          maxTicketsPerUser: number;
          numberOfTicketsSold: number;
          status: number;
          nftContract: string;
          isRefundable: boolean;
          lotteryID: BigNumber;
          dropId: BigNumber;
          memberTicketCostPoints: BigNumber;
          memberTicketCostCoins: BigNumber;
          nonMemberTicketCostCoins: BigNumber;
          defaultPrizeId: BigNumber;
        }
      ]
    >;

    getLotteryTicketCount(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLotteryTickets(
      _lotteryId: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string] & {
          ticketCostInCoins: BigNumber;
          owner: string;
        })[]
      ]
    >;

    getParticipantHistory(
      _participant: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getParticipantsCount(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPrizes(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, number] & {
          prizeId: BigNumber;
          numberOfEditions: number;
        })[]
      ]
    >;

    getRefundableCoinBalance(
      _lotteryId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getTicketCountPerUser(
      _lotteryId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWhitelist(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _rewardsContract: string,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lotteries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lotteryTickets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { ticketCostInCoins: BigNumber; owner: string }
    >;

    participants(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, BigNumber, BigNumber] & {
        totalTicketsBought: number;
        claimedPrize: boolean;
        refundablePoints: BigNumber;
        refundableValue: BigNumber;
      }
    >;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    prizeClaimed(
      _lotteryId: BigNumberish,
      _ticketNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    prizeMerkleRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    prizes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { prizeId: BigNumber; numberOfEditions: number }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    randomGenerator(overrides?: CallOverrides): Promise<[string]>;

    randomSeeds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    receiveRandomNumber(
      _lotteryId: BigNumberish,
      _requestId: BytesLike,
      _randomNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePrize(
      _lotteryId: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestRandomNumber(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsContract(overrides?: CallOverrides): Promise<[string]>;

    setMaxTickets(
      _lotteryId: BigNumberish,
      _maxTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTicketsPerUser(
      _lotteryId: BigNumberish,
      _maxTicketsPerUser: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrizeMerkleRoot(
      _lotteryId: BigNumberish,
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRandomGenerator(
      _IRandomNumberGenerator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardsContract(
      _rewardsContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
      _lotteryId: BigNumberish,
      _whitelist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLottery(
      lotteryId: BigNumberish,
      _memberTicketCostPoints: BigNumberish,
      _memberTicketCostCoins: BigNumberish,
      _nonMemberTicketCostCoins: BigNumberish,
      _startTime: BigNumberish,
      _closeTime: BigNumberish,
      _nftContract: string,
      _maxTickets: BigNumberish,
      _defaultPrizeId: BigNumberish,
      _status: BigNumberish,
      _isRefundable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelists(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdraw(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addPrizes(
    _lotteryId: BigNumberish,
    _prizeIds: BigNumberish[],
    _prizeAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  askForRefund(
    _lotteryId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyTickets(
    _lotteryId: BigNumberish,
    _numberOfTicketsToBuy: BigNumberish,
    _tier: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelLottery(
    _lotteryId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeCloseTime(
    _lotteryId: BigNumberish,
    _time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimPointsAndBuyTickets(
    _lotteryId: BigNumberish,
    _numberOfTicketsToBuy: BigNumberish,
    _points: BigNumberish,
    _proof: BytesLike[],
    _tier: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimPrize(
    _lotteryId: BigNumberish,
    _winner: string,
    _prizeId: BigNumberish,
    _ticketNumber: BigNumberish,
    _proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimedPrizes(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createNewLottery(
    _lotteryId: BigNumberish,
    _collectionId: BigNumberish,
    _memberTicketCostPoints: BigNumberish,
    _memberTicketCostCoins: BigNumberish,
    _nonMemberTicketCostCoins: BigNumberish,
    _startTime: BigNumberish,
    _closeTime: BigNumberish,
    _nftContract: string,
    _isRefundable: boolean,
    _defaultPrizeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLotteryCount(overrides?: CallOverrides): Promise<BigNumber>;

  getLotteryInfo(
    _lotteryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      startTime: number;
      closeTime: number;
      participantsCount: number;
      maxTickets: number;
      maxTicketsPerUser: number;
      numberOfTicketsSold: number;
      status: number;
      nftContract: string;
      isRefundable: boolean;
      lotteryID: BigNumber;
      dropId: BigNumber;
      memberTicketCostPoints: BigNumber;
      memberTicketCostCoins: BigNumber;
      nonMemberTicketCostCoins: BigNumber;
      defaultPrizeId: BigNumber;
    }
  >;

  getLotteryTicketCount(
    _lotteryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLotteryTickets(
    _lotteryId: BigNumberish,
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string] & { ticketCostInCoins: BigNumber; owner: string })[]
  >;

  getParticipantHistory(
    _participant: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getParticipantsCount(
    _lotteryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getPrizes(
    _lotteryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, number] & { prizeId: BigNumber; numberOfEditions: number })[]
  >;

  getRefundableCoinBalance(
    _lotteryId: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getTicketCountPerUser(
    _lotteryId: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWhitelist(
    _lotteryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _rewardsContract: string,
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lotteries(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  lotteryTickets(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { ticketCostInCoins: BigNumber; owner: string }
  >;

  participants(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, BigNumber, BigNumber] & {
      totalTicketsBought: number;
      claimedPrize: boolean;
      refundablePoints: BigNumber;
      refundableValue: BigNumber;
    }
  >;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  prizeClaimed(
    _lotteryId: BigNumberish,
    _ticketNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  prizeMerkleRoots(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  prizes(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & { prizeId: BigNumber; numberOfEditions: number }
  >;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  randomGenerator(overrides?: CallOverrides): Promise<string>;

  randomSeeds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  receiveRandomNumber(
    _lotteryId: BigNumberish,
    _requestId: BytesLike,
    _randomNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePrize(
    _lotteryId: BigNumberish,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestRandomNumber(
    _lotteryId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsContract(overrides?: CallOverrides): Promise<string>;

  setMaxTickets(
    _lotteryId: BigNumberish,
    _maxTickets: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTicketsPerUser(
    _lotteryId: BigNumberish,
    _maxTicketsPerUser: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrizeMerkleRoot(
    _lotteryId: BigNumberish,
    _root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRandomGenerator(
    _IRandomNumberGenerator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardsContract(
    _rewardsContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelist(
    _lotteryId: BigNumberish,
    _whitelist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLottery(
    lotteryId: BigNumberish,
    _memberTicketCostPoints: BigNumberish,
    _memberTicketCostCoins: BigNumberish,
    _nonMemberTicketCostCoins: BigNumberish,
    _startTime: BigNumberish,
    _closeTime: BigNumberish,
    _nftContract: string,
    _maxTickets: BigNumberish,
    _defaultPrizeId: BigNumberish,
    _status: BigNumberish,
    _isRefundable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelists(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  withdraw(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addPrizes(
      _lotteryId: BigNumberish,
      _prizeIds: BigNumberish[],
      _prizeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    askForRefund(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTickets(
      _lotteryId: BigNumberish,
      _numberOfTicketsToBuy: BigNumberish,
      _tier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelLottery(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeCloseTime(
      _lotteryId: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPointsAndBuyTickets(
      _lotteryId: BigNumberish,
      _numberOfTicketsToBuy: BigNumberish,
      _points: BigNumberish,
      _proof: BytesLike[],
      _tier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimPrize(
      _lotteryId: BigNumberish,
      _winner: string,
      _prizeId: BigNumberish,
      _ticketNumber: BigNumberish,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimedPrizes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createNewLottery(
      _lotteryId: BigNumberish,
      _collectionId: BigNumberish,
      _memberTicketCostPoints: BigNumberish,
      _memberTicketCostCoins: BigNumberish,
      _nonMemberTicketCostCoins: BigNumberish,
      _startTime: BigNumberish,
      _closeTime: BigNumberish,
      _nftContract: string,
      _isRefundable: boolean,
      _defaultPrizeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getLotteryCount(overrides?: CallOverrides): Promise<BigNumber>;

    getLotteryInfo(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        startTime: number;
        closeTime: number;
        participantsCount: number;
        maxTickets: number;
        maxTicketsPerUser: number;
        numberOfTicketsSold: number;
        status: number;
        nftContract: string;
        isRefundable: boolean;
        lotteryID: BigNumber;
        dropId: BigNumber;
        memberTicketCostPoints: BigNumber;
        memberTicketCostCoins: BigNumber;
        nonMemberTicketCostCoins: BigNumber;
        defaultPrizeId: BigNumber;
      }
    >;

    getLotteryTicketCount(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLotteryTickets(
      _lotteryId: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string] & { ticketCostInCoins: BigNumber; owner: string })[]
    >;

    getParticipantHistory(
      _participant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getParticipantsCount(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getPrizes(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, number] & { prizeId: BigNumber; numberOfEditions: number })[]
    >;

    getRefundableCoinBalance(
      _lotteryId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getTicketCountPerUser(
      _lotteryId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelist(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _rewardsContract: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lotteries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lotteryTickets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { ticketCostInCoins: BigNumber; owner: string }
    >;

    participants(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, BigNumber, BigNumber] & {
        totalTicketsBought: number;
        claimedPrize: boolean;
        refundablePoints: BigNumber;
        refundableValue: BigNumber;
      }
    >;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    prizeClaimed(
      _lotteryId: BigNumberish,
      _ticketNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    prizeMerkleRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    prizes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { prizeId: BigNumber; numberOfEditions: number }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    randomGenerator(overrides?: CallOverrides): Promise<string>;

    randomSeeds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveRandomNumber(
      _lotteryId: BigNumberish,
      _requestId: BytesLike,
      _randomNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removePrize(
      _lotteryId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestRandomNumber(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardsContract(overrides?: CallOverrides): Promise<string>;

    setMaxTickets(
      _lotteryId: BigNumberish,
      _maxTickets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTicketsPerUser(
      _lotteryId: BigNumberish,
      _maxTicketsPerUser: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrizeMerkleRoot(
      _lotteryId: BigNumberish,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setRandomGenerator(
      _IRandomNumberGenerator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsContract(
      _rewardsContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelist(
      _lotteryId: BigNumberish,
      _whitelist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateLottery(
      lotteryId: BigNumberish,
      _memberTicketCostPoints: BigNumberish,
      _memberTicketCostCoins: BigNumberish,
      _nonMemberTicketCostCoins: BigNumberish,
      _startTime: BigNumberish,
      _closeTime: BigNumberish,
      _nftContract: string,
      _maxTickets: BigNumberish,
      _defaultPrizeId: BigNumberish,
      _status: BigNumberish,
      _isRefundable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelists(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    withdraw(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "LotteryPrizesCountChanged(uint256,uint256)"(
      lotteryId?: BigNumberish | null,
      numberOfPrizes?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { lotteryId: BigNumber; numberOfPrizes: BigNumber }
    >;

    LotteryPrizesCountChanged(
      lotteryId?: BigNumberish | null,
      numberOfPrizes?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { lotteryId: BigNumber; numberOfPrizes: BigNumber }
    >;

    "LotteryStatusChanged(uint256,uint8)"(
      lotteryId?: BigNumberish | null,
      status?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, number],
      { lotteryId: BigNumber; status: number }
    >;

    LotteryStatusChanged(
      lotteryId?: BigNumberish | null,
      status?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, number],
      { lotteryId: BigNumber; status: number }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "PrizeClaimed(uint256,address,uint256)"(
      lotteryId?: BigNumberish | null,
      participantAddress?: string | null,
      prizeId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { lotteryId: BigNumber; participantAddress: string; prizeId: BigNumber }
    >;

    PrizeClaimed(
      lotteryId?: BigNumberish | null,
      participantAddress?: string | null,
      prizeId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { lotteryId: BigNumber; participantAddress: string; prizeId: BigNumber }
    >;

    "Refunded(uint256,address,uint256)"(
      lotteryId?: BigNumberish | null,
      participantAddress?: string | null,
      refundAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      {
        lotteryId: BigNumber;
        participantAddress: string;
        refundAmount: BigNumber;
      }
    >;

    Refunded(
      lotteryId?: BigNumberish | null,
      participantAddress?: string | null,
      refundAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      {
        lotteryId: BigNumber;
        participantAddress: string;
        refundAmount: BigNumber;
      }
    >;

    "RequestNumbers(uint256,bytes32)"(
      lotteryId?: BigNumberish | null,
      requestId?: BytesLike | null
    ): TypedEventFilter<
      [BigNumber, string],
      { lotteryId: BigNumber; requestId: string }
    >;

    RequestNumbers(
      lotteryId?: BigNumberish | null,
      requestId?: BytesLike | null
    ): TypedEventFilter<
      [BigNumber, string],
      { lotteryId: BigNumber; requestId: string }
    >;

    "ResponseReceived(bytes32)"(
      requestId?: BytesLike | null
    ): TypedEventFilter<[string], { requestId: string }>;

    ResponseReceived(
      requestId?: BytesLike | null
    ): TypedEventFilter<[string], { requestId: string }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "TicketCostChanged(address,uint256,uint256)"(
      operator?: null,
      lotteryId?: null,
      priceOfTicket?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { operator: string; lotteryId: BigNumber; priceOfTicket: BigNumber }
    >;

    TicketCostChanged(
      operator?: null,
      lotteryId?: null,
      priceOfTicket?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { operator: string; lotteryId: BigNumber; priceOfTicket: BigNumber }
    >;

    "TicketSold(uint256,uint256,address,uint8)"(
      lotteryId?: BigNumberish | null,
      ticketNumber?: null,
      participantAddress?: string | null,
      tier?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, number],
      {
        lotteryId: BigNumber;
        ticketNumber: BigNumber;
        participantAddress: string;
        tier: number;
      }
    >;

    TicketSold(
      lotteryId?: BigNumberish | null,
      ticketNumber?: null,
      participantAddress?: string | null,
      tier?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, number],
      {
        lotteryId: BigNumber;
        ticketNumber: BigNumber;
        participantAddress: string;
        tier: number;
      }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addPrizes(
      _lotteryId: BigNumberish,
      _prizeIds: BigNumberish[],
      _prizeAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    askForRefund(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyTickets(
      _lotteryId: BigNumberish,
      _numberOfTicketsToBuy: BigNumberish,
      _tier: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelLottery(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeCloseTime(
      _lotteryId: BigNumberish,
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimPointsAndBuyTickets(
      _lotteryId: BigNumberish,
      _numberOfTicketsToBuy: BigNumberish,
      _points: BigNumberish,
      _proof: BytesLike[],
      _tier: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimPrize(
      _lotteryId: BigNumberish,
      _winner: string,
      _prizeId: BigNumberish,
      _ticketNumber: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimedPrizes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNewLottery(
      _lotteryId: BigNumberish,
      _collectionId: BigNumberish,
      _memberTicketCostPoints: BigNumberish,
      _memberTicketCostCoins: BigNumberish,
      _nonMemberTicketCostCoins: BigNumberish,
      _startTime: BigNumberish,
      _closeTime: BigNumberish,
      _nftContract: string,
      _isRefundable: boolean,
      _defaultPrizeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLotteryCount(overrides?: CallOverrides): Promise<BigNumber>;

    getLotteryInfo(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLotteryTicketCount(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLotteryTickets(
      _lotteryId: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParticipantHistory(
      _participant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParticipantsCount(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrizes(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRefundableCoinBalance(
      _lotteryId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketCountPerUser(
      _lotteryId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelist(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _rewardsContract: string,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lotteries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lotteryTickets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    participants(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    prizeClaimed(
      _lotteryId: BigNumberish,
      _ticketNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prizeMerkleRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prizes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    randomGenerator(overrides?: CallOverrides): Promise<BigNumber>;

    randomSeeds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveRandomNumber(
      _lotteryId: BigNumberish,
      _requestId: BytesLike,
      _randomNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePrize(
      _lotteryId: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestRandomNumber(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsContract(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxTickets(
      _lotteryId: BigNumberish,
      _maxTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTicketsPerUser(
      _lotteryId: BigNumberish,
      _maxTicketsPerUser: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrizeMerkleRoot(
      _lotteryId: BigNumberish,
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRandomGenerator(
      _IRandomNumberGenerator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardsContract(
      _rewardsContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelist(
      _lotteryId: BigNumberish,
      _whitelist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLottery(
      lotteryId: BigNumberish,
      _memberTicketCostPoints: BigNumberish,
      _memberTicketCostCoins: BigNumberish,
      _nonMemberTicketCostCoins: BigNumberish,
      _startTime: BigNumberish,
      _closeTime: BigNumberish,
      _nftContract: string,
      _maxTickets: BigNumberish,
      _defaultPrizeId: BigNumberish,
      _status: BigNumberish,
      _isRefundable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelists(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPrizes(
      _lotteryId: BigNumberish,
      _prizeIds: BigNumberish[],
      _prizeAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    askForRefund(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyTickets(
      _lotteryId: BigNumberish,
      _numberOfTicketsToBuy: BigNumberish,
      _tier: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelLottery(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeCloseTime(
      _lotteryId: BigNumberish,
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimPointsAndBuyTickets(
      _lotteryId: BigNumberish,
      _numberOfTicketsToBuy: BigNumberish,
      _points: BigNumberish,
      _proof: BytesLike[],
      _tier: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimPrize(
      _lotteryId: BigNumberish,
      _winner: string,
      _prizeId: BigNumberish,
      _ticketNumber: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimedPrizes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createNewLottery(
      _lotteryId: BigNumberish,
      _collectionId: BigNumberish,
      _memberTicketCostPoints: BigNumberish,
      _memberTicketCostCoins: BigNumberish,
      _nonMemberTicketCostCoins: BigNumberish,
      _startTime: BigNumberish,
      _closeTime: BigNumberish,
      _nftContract: string,
      _isRefundable: boolean,
      _defaultPrizeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLotteryCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLotteryInfo(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLotteryTicketCount(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLotteryTickets(
      _lotteryId: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParticipantHistory(
      _participant: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParticipantsCount(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrizes(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRefundableCoinBalance(
      _lotteryId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicketCountPerUser(
      _lotteryId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelist(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _rewardsContract: string,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lotteries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteryTickets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    participants(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prizeClaimed(
      _lotteryId: BigNumberish,
      _ticketNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prizeMerkleRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prizes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomGenerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomSeeds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveRandomNumber(
      _lotteryId: BigNumberish,
      _requestId: BytesLike,
      _randomNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePrize(
      _lotteryId: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestRandomNumber(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMaxTickets(
      _lotteryId: BigNumberish,
      _maxTickets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTicketsPerUser(
      _lotteryId: BigNumberish,
      _maxTicketsPerUser: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrizeMerkleRoot(
      _lotteryId: BigNumberish,
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRandomGenerator(
      _IRandomNumberGenerator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsContract(
      _rewardsContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      _lotteryId: BigNumberish,
      _whitelist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLottery(
      lotteryId: BigNumberish,
      _memberTicketCostPoints: BigNumberish,
      _memberTicketCostCoins: BigNumberish,
      _nonMemberTicketCostCoins: BigNumberish,
      _startTime: BigNumberish,
      _closeTime: BigNumberish,
      _nftContract: string,
      _maxTickets: BigNumberish,
      _defaultPrizeId: BigNumberish,
      _status: BigNumberish,
      _isRefundable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelists(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
