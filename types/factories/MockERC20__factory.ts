/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockERC20, MockERC20Interface } from "../MockERC20";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052346200014b576200001462000167565b6200001e62000167565b81516001600160401b0381116200013b575b620000488162000042600354620001a9565b620001e6565b602080601f8311600114620000aa5750819062000083946000926200009e575b50508160011b916000199060031b1c19161760035562000298565b6200008e33620003ca565b6040516109d590816200047f8239f35b01519050388062000068565b60036000529193601f1985167fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b936000905b828210620001225750509160019391866200008397941062000108575b505050811b0160035562000298565b015160001960f88460031b161c19169055388080620000f9565b80600186978294978701518155019601940190620000dc565b6200014562000150565b62000030565b600080fd5b50634e487b7160e01b600052604160045260246000fd5b60408051919082016001600160401b0381118382101762000199575b60405260048252634d4f434b60e01b6020830152565b620001a362000150565b62000183565b90600182811c92168015620001db575b6020831014620001c557565b634e487b7160e01b600052602260045260246000fd5b91607f1691620001b9565b601f8111620001f3575050565b6000906003825260208220906020601f850160051c8301941062000234575b601f0160051c01915b8281106200022857505050565b8181556001016200021b565b909250829062000212565b601f81116200024c575050565b6000906004825260208220906020601f850160051c830194106200028d575b601f0160051c01915b8281106200028157505050565b81815560010162000274565b90925082906200026b565b80519091906001600160401b0381116200038c575b620002c581620002bf600454620001a9565b6200023f565b602080601f8311600114620003045750819293600092620002f8575b50508160011b916000199060031b1c191617600455565b015190503880620002e1565b6004600052601f198316949091907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b926000905b8782106200037357505083600195961062000359575b505050811b01600455565b015160001960f88460031b161c191690553880806200034e565b8060018596829496860151815501950193019062000338565b6200039662000150565b620002ad565b6402540be400198111620003b4576402540be4000190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b031680156200043957620003e76002546200039c565b60025580600052600060205260406000206200040481546200039c565b905560007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206040516402540be4008152a3565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fdfe60806040526004361015610013575b600080fd5b60003560e01c806306fdde03146100ef578063095ea7b3146100e657806318160ddd146100dd57806323b872dd146100d4578063313ce567146100cb57806339509351146100c257806370a08231146100b957806395d89b41146100b0578063a457c2d7146100a7578063a9059cbb1461009e5763dd62ed3e1461009657600080fd5b61000e6105eb565b5061000e6105c4565b5061000e610515565b5061000e610451565b5061000e610416565b5061000e6103bd565b5061000e6103a0565b5061000e6102d4565b5061000e6102b5565b5061000e610283565b5061000e61014f565b919091602080825283519081818401526000945b82861061013957505080604093941161012c575b601f01601f1916010190565b6000838284010152610120565b858101820151848701604001529481019461010c565b503461000e576000806003193601126102545760405190806003549060019180831c9280821692831561024a575b602092838610851461023657858852602088019490811561021a57506001146101c1575b6101bd876101b181890382610644565b604051918291826100f8565b0390f35b600360005294509192917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b83861061020957505050910190506101b1826101bd38806101a1565b8054858701529482019481016101ed565b60ff191685525050500191506101b19050826101bd38806101a1565b634e487b7160e01b82526022600452602482fd5b93607f169361017d565b80fd5b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e576102aa6102a0610257565b6024359033610874565b602060405160018152f35b503461000e57600036600319011261000e576020600254604051908152f35b503461000e57606036600319011261000e576102ee610257565b6102f661026d565b6001600160a01b03821660009081526001602090815260408083203384529091529020604435919054926001840161033f575b6103339350610751565b60405160018152602090f35b82841061035b576103568361033395033383610874565b610329565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b503461000e57600036600319011261000e57602060405160128152f35b503461000e57604036600319011261000e576102aa6103da610257565b33600052600160205261040f6024356104098360406000209060018060a01b0316600052602052604060002090565b5461067c565b9033610874565b503461000e57602036600319011261000e576001600160a01b03610438610257565b1660005260006020526020604060002054604051908152f35b503461000e576000806003193601126102545760405190806004549060019180831c9280821692831561050b575b602092838610851461023657858852602088019490811561021a57506001146104b2576101bd876101b181890382610644565b600460005294509192917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8386106104fa57505050910190506101b1826101bd38806101a1565b8054858701529482019481016104de565b93607f169361047f565b503461000e57604036600319011261000e5761052f610257565b6024359033600052600160205261055c8160406000209060018060a01b0316600052602052604060002090565b54918083106105715761033392039033610874565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b503461000e57604036600319011261000e576102aa6105e1610257565b6024359033610751565b503461000e57604036600319011261000e57602061063b61060a610257565b61061261026d565b6001600160a01b0391821660009081526001855260408082209290931681526020919091522090565b54604051908152f35b90601f8019910116810190811067ffffffffffffffff82111761066657604052565b634e487b7160e01b600052604160045260246000fd5b81198111610688570190565b634e487b7160e01b600052601160045260246000fd5b156106a557565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b156106fd57565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b916001600160a01b038084169290918315610821576107ff827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9461081c94169661079d88151561069e565b6107e4846107bd8360018060a01b03166000526000602052604060002090565b546107ca828210156106f6565b039160018060a01b03166000526000602052604060002090565b556001600160a01b0316600090815260208190526040902090565b61080a82825461067c565b90556040519081529081906020820190565b0390a3565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03808216929190831561094e5782169384156108fe57806108ed7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925946108d661081c9560018060a01b03166000526001602052604060002090565b9060018060a01b0316600052602052604060002090565b556040519081529081906020820190565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fdfea26469706673582212205b12c759644f8c7864e45b9ca4757145261bbb01a8a99fa3313ee8f2357b3c5764736f6c634300080e0033";

export class MockERC20__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockERC20> {
    return super.deploy(overrides || {}) as Promise<MockERC20>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockERC20 {
    return super.attach(address) as MockERC20;
  }
  connect(signer: Signer): MockERC20__factory {
    return super.connect(signer) as MockERC20__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new utils.Interface(_abi) as MockERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC20 {
    return new Contract(address, _abi, signerOrProvider) as MockERC20;
  }
}
